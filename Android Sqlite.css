Sqlite is an open source database
Sqlite supports starndart relational database features
Sqlite database is a local database i.e it does not require a server to operate.It saves data localy in a text file in the system
Android come with built in sqlite database implimentation.


CRUD OPERATION WITH KOTLIN
SQLite database 
1. How to create the data base
2. How to create helper class
3.Create table and Select data from table
4. Insert Update and delete



LESSON 1: ----->   How to Create A sqlite data base in android


 ------>   To create a database you need to create a class  with the parameter of type of context (you can name the variable anthing).               DEFINITION OF CONTEXT  it's the context of current state of the application/object. It lets newly-created objects understand what has been going on. Typically, you call it to get information regarding another part of your program (activity and package/application). e.g when making a toast we passs in context. WE can do thta by using e.g applicaioncontext method e.g  Toast.makeText(applicationContext,"Hellow",Toast.LENGTH_SHORT).show

class Database(context:Context)  or class Database( var_context:Context)
               ------   -----
           var-name     type

------>   Then you need to make the class that extends the SQLiteOpenHelper() classs ,this class is what will enable you to make the database.
class Database(context:Context): SQLiteOpenHelper() 



------> Within this SQLiteOpenHelper() ,we need to pass four arguments
  1. First is the ---context
  2. Next is the --- database name
  3.Then we give the --- factory                           //We pass null as a paremeter because we want to avoid the overide method
  4. Finally we give --- database version                  //Since this is the first version we pass in 1,

class Database (context: Context) :SQLiteOpenHelper(context,"data_base_name",null,1){
 
}


------>Then now you need to overide some basic functions of the SQLiteOpenHelper() class i.e

class Database (context: Context) :SQLiteOpenHelper(context,"data_base_name",null,1){


    override fun onCreate(db: SQLiteDatabase?) {     // This on create function will be excuted if the device does not contain the database
                                                     // This is where we need to create our table for our database and inset information to our rows and colums of the table of the database.The database was created when passed a name for our database in the SQLiteOpenHelper() method
        TODO("Not yet implemented")
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {     //This will be excuted if we have an older version of the database which needs to be upgraded accordingly
        TODO("Not yet implemented")
    }
}



-----> THen now we have to write the table name and all the column details
Remember that the sqlite is a relational database that take the table approach of storing data. 
e.g

                                               studentsResults          <---------- Table name
.                                         ___________________________     
.                                        |___id___|__name__|_marks__|   <----- column names     
.                                        |________|________|________|         
.                                        |________|________|________|       
.                                        |________|________|________|
 So we have to create new variablews within the companion object to identify the table and the column details




class Database (context: Context) :SQLiteOpenHelper(context,"ACDB",null,1){
    override fun onCreate(db: SQLiteDatabase?) {
        db?.execSQL("CREATE TABLE STUDENT_RESULTS (_id INTEGER PRIMARY KEY AUTOINCREMENT ,NAME TEXT, MARKS TEXT)")   // This create the tables and the columns for the  table
        db?.execSQL("INSERT INTO STUDENT_RESULTS (NAME,MARKS) VALUES ('George',432)")                        // This inserts data into the columns of the table for first row
        db?.execSQL("INSERT INTO STUDENT_RESULTS (NAME,MARKS) VALUES ('Eliud',455)")                         // This inserts data into the columns of the table for first row




  -----> Now in the main activity file we need to be able to access the data base and send querrys to it ,and this querries will return data we select fro the data base
    class MainActivity:AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

                                    val databaseInstace = Database(applicationContext)               //    We create an instance of the class we created our database in  and pass in context as an argument
                                    var db = databaseInstance.readableDatabase                       //    Now we have to make this database readable in the main activity  
                                    var data = db.rawQuery("SELECT * FROM ACTABLE",null)             //    Now we have to send a query to thr readble database. This rawQuery takes in two arguments, a query to select the table,and a selection of  content within the table,but in this case we pass null because we dont want to select a specific part of th table, but insted want the whole table

     
     if (data.moveToFirst()){              //If we are able to move to the first part of the data returned Then the code excution was succesful and the if statement will be excuted. a toast message will be displayed showing the data in the first colum since we passed the column index in the data.getString(ColumnIndex) method
            Toast.makeText(applicationContext,data.getString(1)+"\n"+rs.getString(2),Toast.LENGTH_LONG).show()   //This will display a toast messg showing data in the column index passed within the brackets
                          -----context------, -----------------msg------------------,---duration-----
        }
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     


To create database name within the class as a variable we use a companion object

class Database(context:Context): SQLiteOpenHelper(context,DATABASE_NAME,null,DATABASE_VERSION){
    
    companion object{
        private var DATABASE_NAME = "Studends.db"
        private var DATABASE_VERSION =1
   
    }

}





------>Then now you need to overide some basic functions of the SQLiteOpenHelper() class i.e

class Database(context:Context): SQLiteOpenHelper(context,DATABASE_NAME,null,DATABASE_VERSION){
    
    companion object{
        private var DATABASE_NAME = "Studends.db"
        private var DATABASE_VERSION =1
   
    }

    override fun onCreate(db: SQLiteDatabase?) {     // This on create function will be excuted if the device does not contain the database
        TODO("Not yet implemented")
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {     //This will be excuted if we have an older version of the database which needs to be upgraded accordingly
        TODO("Not yet implemented")
    }
}


-----> THen now we have to write the table name and all the column details
Remember that the sqlite is a relational database that take the table approach of storing data. 
e.g

                                               studentsResults          <---------- Table name
.                                         ___________________________     
.                                        |___id___|__name__|_marks__|   <----- column names     
.                                        |________|________|________|         
.                                        |________|________|________|       
.                                        |________|________|________|
 So we have to create new variablews within the companion object to identify the table and the column details

class Database(context:Context): SQLiteOpenHelper(context,DATABASE_NAME,null,DATABASE_VERSION){
    
    companion object{
        private var DATABASE_NAME = "Studends.db"
        private var DATABASE_VERSION =1
        private var TABLE_NAME = "students"
        private var ID =1
        private var STUDENT_NAME ="name"
        private var STUDENT_MARKS ="marks"
   
    }

    override fun onCreate(db: SQLiteDatabase?) {
        TODO("Not yet implemented")
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {
        TODO("Not yet implemented")
    }
}


------> NOW we have to create the table.We do this in the create function ,because once the database class is called ,the onCreate function is excuted first.
We use sql language to create this table.This sql prompt or query we,will store it in a variable we will call CREATE_TABLE
    The sql propt looks like this
val CREATE_TABLE =  "CREATE TABLE  ${TABLE_NAME}   ( ${ID} INTEGER PRIMARY KEY AUTOINCREMENT, ${STUDENT_NAME} TEXT,${STUDENT_MARKS} INTEGER)"
                         ------------------------      -------------
                         This creates a table           Here we write the column names 
                         of name identied in            and the type of data they wil hold e.g NAME TEXT within brackets
                         the interisence              

class Database(context:Context): SQLiteOpenHelper(context,DATABASE_NAME,null,DATABASE_VERSION){
    
    companion object{
        private var DATABASE_NAME = "Studends.db"
        private var DATABASE_VERSION =1
        private var TABLE_NAME = "students"
     
        private var ID =1
        private var COL_NAME ="name"
        private var COL_MARKS ="marks"
   
    }

    override fun onCreate(db: SQLiteDatabase?) {  // we use this argument received as a database to create the database
       val CREATE_TABLE =  "CREATE TABLE  ${TABLE_NAME}   ( ${ID} INTEGER PRIMARY KEY AUTOINCREMENT, ${COL_NAME} TEXT,${COL_MARKS} INTEGER)"
        db?.execSQL(CREATE_TABLE)                    // we use thE argument received as a database to create the database
        
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {
        //If the above database is already created ,we need to drop the old table and upgrade or create a new one
        var DROP_TABLE ="DROP TABLE IF EXISTS $TABLE_NAME"
        db.execSQL(DROP_TABLE)
        onCreate(db)     //and upgrade or create a new one
        
    }
}


---------->   Now we will createa class that willstore our data for our CRUD operation.
   For that we have to create a  class which is used to hold our data 

class Students {
    var id:Int =0
    var name:String =""
    var marks:String =""
     
         constructor(_name:String,_age:Int){
        this.age =_age
        this.name = _name
    }

}



------> Create a function to inser a student data


    fun user(user:Student){
        val db = this.writableDatabase                      // There are two types of Sqlite databases  i.e the writableDatabase object and the readableDatabase object 
        val contentvalue = ContentVAlue()                   // To insert into database we need content values 
         contentvalue.put(COL_NAME,user.name)               // We use the put method to inser values into the database. 
         contentvalue.put(COL_MARKS,user.age)               // The put method accepts two parameters, the colum the value is to go and the value 
          db.insert(TABLE_NAME,NULL,contentvalue)           // To the insert method we pass three parameters ,the table name ,null and the content value
                                                     
var result =  db.insert(TABLE_NAME,NULL,contentvalue)       // This inser method retuns a row id. We store the row id in a variable
                                                            If the result is -1 then the insertion failde ,else the insertion was a succcess
     
     
     
     
     Now we chaeck if the result was succesful or not
     
     
        if(result == -1.toLong()){

            Log.i("Fail","The assignment has failed")
        }else
            Log.i("success","The assignment has succeeded")


    }

Now in the main activity we set fields to receive the data and a button to submit the data


        var insert = findViewById<Button>(R.id.insert)
        var age = findViewById<EditText>(R.id.age)
        var name = findViewById<EditText>(R.id.name)

We check if the data received from the input fields is valid or empty
        if(age.text.toString().isNotEmpty() && name.text.toString().isNotEmpty()

If both input fields have valid data ,then we exterxact the data and put it inside the variables

var ageAns =  age.text.toString().toInt()
var nameAns = name.text.toString()

We pass the above values into the user object

     var user = User(nameAns,ageAns)


Now we have to call the class we used to create our data base .
We pass in the context 
 and use the variable of the class to call the function that will pass the data to the class students to store  our data to.
     
     var context = this

     var db = Database(contex)
     db.user(user)












class MainActivity:AppCompatActivity() {
    private lateinit var  receiver: Receiver
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        var context = this


        var insert = findViewById<Button>(R.id.insert)
        var age = findViewById<EditText>(R.id.age)
        var name = findViewById<EditText>(R.id.name)

        insert.setOnClickListener {
            if(age.text.toString().isNotEmpty() && name.text.toString().isNotEmpty()){
                var user = User(age.text.toString(),name.text.toString().toInt())
                var db = UsrDataBase(context)
                db.user(user)
        }else{
            Log.i("FAiled","The misssion failed in main activity")}
         
         
         

         
         TO CREATE READ AND UPDATE DATA IN ANDROID SQLITE
         
         
         We create a function in the classs where we create the data base 
         
     class UsrDataBase(context: Context):SQLiteOpenHelper(context, DATABASE_NAME,null, DATABASE_VERSION) {
    override fun onCreate(db: SQLiteDatabase?) {
        val CREATE_TABLE =  "CREATE TABLE  ${TABLE_NAME}   ( ${COL_ID} INTEGER PRIMARY KEY AUTOINCREMENT, ${COL_NAME} TEXT,${COL_AGE} INTEGER)"
        db?.execSQL(CREATE_TABLE)
        TODO("Not yet implemented")
         
         
         fun readData():MutableList<User>{
          var list :MutableList<User> = ArrayList()
           var db = this.readableDataBase
           val query = "SELECT * from $TABLE_NAME "
           Rval result = db.rawQuery(query,null)
           
           if (result.moveTofirst()){
            
                    do{
                          var user = User()
                         user.id = result.getString(0).toInt     
                         user.id = result.getString(result.getColumnIndex()).toInt   //If you dont know the index of the column you can use the method getColumnIndex and pass the column name
                         user.id = result.getString(0).toInt
                     list.add(user)
                      }
                   while (result.moveToNext())     
           
           result.close()
            db.close()   }
          
          
          
            To display the data from the data base ,we can use a reda button in the mainActivity
    class MainActivity:AppCompatActivity() {
    private lateinit var  receiver: Receiver
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
          
           var db = UsrDataBase(context)
          
          read.setOnclickListener{
           
           var data = db.readData
          
          
          }
          
          

         


         
         
         



